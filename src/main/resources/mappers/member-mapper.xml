<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  
<mapper namespace="Member">
	<!-- type = com.kh.mb.member.model.vo.Member -->
	<resultMap type="com.kh.travelMate.member.model.vo.Member" id="memberResultSet">
	<!-- resultSet에서 mid라는 값을 가져와서 담아준다 MID 
	primary key만 id로 하고 나머지는 result
	앞에꺼는 vo껄로 뒤에꺼는 db껄로 작성해야함 -->
		<!-- <id property="mid" column="MID"/>
		<result property="userId" column="USER_ID"></result>
		<result property="userPwd" column="USER_PWD"></result>
		<result property="userName" column="USER_NAME"></result>
		<result property="email" column="EMAIL"></result>
		<result property="birthday" column="BIRTHDAY"></result>
		<result property="gender" column="GENDER"></result>
		<result property="phone" column="PHONE"></result>
		<result property="address" column="ADDRESS"></result>
		<result property="enrollDate" column="ENROLL_DATE"></result>
		<result property="modifyDate" column="MODIFY_DATE"></result>
		<result property="status" column="STATUS"></result> -->
		
		<id property="user_no" column="USER_NO"/>
		<result property="email" column="EMAIL"/>
		<result property="password" column="PASSWORD"/>
		<result property="user_name" column="USER_NAME"/>
		<result property="nick_name" column="NICK_NAME"/>
		<result property="phone" column="PHONE"/>
		<result property="birthday" column="BIRTHDAY"/>
		<result property="gender" column="GENDER"/>
		<result property="enroll_date" column="ENROLL_DATE"/>
		<result property="modify_date" column="MODIFY_DATE"/>
		<result property="user_type" column="USER_TYPE"/>
		<result property="bank_no" column="BANK_NO"/>
		<result property="cybermoney" column="CYBERMONEY"/>
		<result property="cm_modify_date" column="CM_MODIFY_DATE"/>
		<result property="bank" column="BANK"/>
		<result property="user_type_level" column="USER_TYPE_LEVEL"/>
		<result property="join_status" column="JOIN_STATUS"/>
		
	</resultMap>
	
	<!-- 	로그인 정보 조회용 쿼리문 -->
	<select id="loginCheck" resultMap="memberResultSet" parameterType="Member">
		<!-- SELECT *
		FROM MEMBER
		WHERE USER_ID = #{userId}
		AND USER_PWD = #{userPwd}
		AND STATUS = 'Y'	 -->
		SELECT *
		FROM MEMBER
		WHERE EMAIL = #{email}
		AND PASSWORD = #{password}
		AND (JOIN_STATUS = 'T'
		OR JOIN_STATUS = 'U')
	</select> 

	<!-- 회원가입용 쿼리문 -->
	<insert id = "insertMember" parameterType="Member">
		INSERT INTO MEMBER
		VALUES(SEQ_USER_NO.NEXTVAL, #{email}, #{password}, #{user_name}, 
				#{nick_name}, #{phone}, #{birthday}, #{gender}, 
				SYSDATE, SYSDATE, DEFAULT, NULL, 0, SYSDATE, NULL, DEFAULT, 'T')
	</insert>
	
	<!-- 암호화된 비밀번호 조회용 쿼리문-->
	<select id="selectPwd" resultType="java.lang.String" parameterType="java.lang.String">
		SELECT PASSWORD
		FROM MEMBER
		WHERE EMAIL = #{email}
		AND (JOIN_STATUS = 'T'
		OR JOIN_STATUS = 'U')
	</select>
	
	<!-- 암호화 후 로그인용 쿼리문 -->
	<select id="selectLoginUser" resultType="Member" parameterType="Member"> <!-- resultMap="memberResultSet"도 가능 --> <!-- resultType="java.lang.String" 오류! -->
		SELECT *
		FROM MEMBER
		WHERE EMAIL = #{email}
		AND (JOIN_STATUS = 'T'
		OR JOIN_STATUS = 'U')
	</select>
	
	<!-- 아이디 중복체크용 메소드 -->
	<select id="selectDuplChkId" resultType="java.lang.Integer" parameterType="java.lang.String">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE EMAIL = #{email}
	</select>
	
	<!-- 닉네임 중복체크용 메소드 -->
	<select id="selectDuplChkNick" resultType="java.lang.Integer" parameterType="java.lang.String">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE NICK_NAME = #{nick_name}
	</select>
	

	<select id="selectOneUser" resultType="Member" parameterType="_int">
		SELECT * FROM MEMBER
		WHERE USER_NO = #{writer}
	</select>
	
	<update id="updateCyberMoney" parameterType="Member">
		UPDATE MEMBER
		SET CYBERMONEY = (CYBERMONEY-200)
		WHERE USER_NO = #{user_no}
	</update>
	
	<update id="useCyberMoney" parameterType="Member">
		UPDATE MEMBER
		SET CYBERMONEY = (CYBERMONEY+200)
		WHERE USER_NO = #{user_no}
	</update>
	
	<!-- 비밀번호 찾기 회원 조회용 메소드 -->
	<select id="selectSearchUser" resultType="java.lang.Integer" parameterType="Member">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE USER_NAME = #{user_name} 
		AND EMAIL = #{email}
		AND (JOIN_STATUS = 'T' 
		OR JOIN_STATUS = 'U')
	
	</select>
	
	<!-- 비밀번호 찾기 후 임시 비밀번호로 업데이트하는 메소드 -->
	<select id="updatePwd" resultType="java.lang.Integer" parameterType="java.lang.String">
		UPDATE MEMBER
		SET PASSWORD = #{password},
		JOIN_STATUS = 'U'
		WHERE EMAIL = #{email}
		AND JOIN_STATUS = 'T'
	
	</select>
	
	<!-- 네이버로 가입한 회원조회 -->
	<select id="selectNaverMember" resultType="Member" parameterType="Member">
	SELECT *
	FROM MEMBER
	WHERE EMAIL = #{email} 
	AND JOIN_STATUS = 'N'
	</select>
	
	<!-- 네이버 회원가입용 쿼리문 -->
	<insert id = "insertNaverMember" parameterType="Member">
		INSERT INTO MEMBER
		VALUES(SEQ_USER_NO.NEXTVAL, #{email}, NULL, #{user_name}, 
				#{nick_name}, NULL, #{birthday}, #{gender}, 
				SYSDATE, SYSDATE, DEFAULT, NULL, 0, SYSDATE, NULL, DEFAULT, 'N')
	</insert>
	
	<!-- 카카오로 가입한 회원조회 -->
	<select id="selectKakaoMember" resultType="Member" parameterType="Member">
	SELECT *
	FROM MEMBER
	WHERE EMAIL = #{email}
	AND JOIN_STATUS = 'K'
	</select>
	
	<!-- 카카오 회원가입용 쿼리문 -->
	<insert id = "insertKakaoMember" parameterType="Member">
		INSERT INTO MEMBER
		VALUES(SEQ_USER_NO.NEXTVAL, #{email}, NULL, NULL, 
				#{nick_name}, NULL, #{birthday}, #{gender}, 
				SYSDATE, SYSDATE, DEFAULT, NULL, 0, SYSDATE, NULL, DEFAULT, 'K')
	</insert>
	
	<!-- DB에 저장되어 있는 회원의 비밀번호 가지고 오기 -->
	<select id="selectModifyPwd" parameterType="Member" resultType="java.lang.String">
	SELECT PASSWORD
	FROM MEMBER
	WHERE USER_NO = #{user_no}
	</select>
	
	<select id="updateModifyPwd" resultType="java.lang.Integer" parameterType="Member">
		UPDATE MEMBER
		SET PASSWORD = #{password},
		JOIN_STATUS = 'T'
		WHERE USER_NO = #{user_no}
		AND JOIN_STATUS = 'U'
	
	</select>

</mapper> 


